"""
Planificateur de t√¢ches - Semantic Pulse X
Gestion des t√¢ches programm√©es et des workflows
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, List, Callable
import schedule
import time
from threading import Thread
import logging

from app.backend.orchestration.prefect_flows import (
    semantic_pulse_etl_flow,
    emotion_analysis_flow,
    topic_clustering_flow,
    monitoring_flow
)
from app.backend.core.metrics import update_metrics

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TaskScheduler:
    """Planificateur de t√¢ches pour Semantic Pulse X"""
    
    def __init__(self):
        self.running = False
        self.tasks = {}
        self.scheduler_thread = None
    
    def add_task(self, name: str, func: Callable, schedule_time: str, **kwargs):
        """Ajoute une t√¢che au planificateur"""
        self.tasks[name] = {
            "func": func,
            "schedule": schedule_time,
            "kwargs": kwargs,
            "last_run": None,
            "status": "pending"
        }
        logger.info(f"‚úÖ T√¢che '{name}' ajout√©e - Planification: {schedule_time}")
    
    def remove_task(self, name: str):
        """Supprime une t√¢che du planificateur"""
        if name in self.tasks:
            del self.tasks[name]
            logger.info(f"üóëÔ∏è T√¢che '{name}' supprim√©e")
    
    def get_task_status(self, name: str) -> Dict[str, Any]:
        """Retourne le statut d'une t√¢che"""
        if name not in self.tasks:
            return {"error": "T√¢che non trouv√©e"}
        
        task = self.tasks[name]
        return {
            "name": name,
            "status": task["status"],
            "last_run": task["last_run"],
            "schedule": task["schedule"]
        }
    
    def get_all_tasks_status(self) -> Dict[str, Any]:
        """Retourne le statut de toutes les t√¢ches"""
        return {
            "total_tasks": len(self.tasks),
            "running": self.running,
            "tasks": {name: self.get_task_status(name) for name in self.tasks}
        }
    
    async def run_task(self, name: str):
        """Ex√©cute une t√¢che"""
        if name not in self.tasks:
            logger.error(f"‚ùå T√¢che '{name}' non trouv√©e")
            return
        
        task = self.tasks[name]
        task["status"] = "running"
        task["last_run"] = datetime.now().isoformat()
        
        try:
            logger.info(f"üîÑ Ex√©cution de la t√¢che '{name}'")
            
            # Ex√©cuter la t√¢che
            if asyncio.iscoroutinefunction(task["func"]):
                result = await task["func"](**task["kwargs"])
            else:
                result = task["func"](**task["kwargs"])
            
            task["status"] = "completed"
            logger.info(f"‚úÖ T√¢che '{name}' termin√©e avec succ√®s")
            
            return result
            
        except Exception as e:
            task["status"] = "error"
            logger.error(f"‚ùå Erreur t√¢che '{name}': {e}")
            raise
    
    def start_scheduler(self):
        """D√©marre le planificateur"""
        if self.running:
            logger.warning("‚ö†Ô∏è Le planificateur est d√©j√† en cours d'ex√©cution")
            return
        
        self.running = True
        self.scheduler_thread = Thread(target=self._run_scheduler, daemon=True)
        self.scheduler_thread.start()
        logger.info("üöÄ Planificateur d√©marr√©")
    
    def stop_scheduler(self):
        """Arr√™te le planificateur"""
        self.running = False
        if self.scheduler_thread:
            self.scheduler_thread.join()
        logger.info("üõë Planificateur arr√™t√©")
    
    def _run_scheduler(self):
        """Boucle principale du planificateur"""
        while self.running:
            try:
                # V√©rifier les t√¢ches programm√©es
                for name, task in self.tasks.items():
                    if self._should_run_task(name, task):
                        # Ex√©cuter la t√¢che dans un thread s√©par√©
                        asyncio.run(self.run_task(name))
                
                # Mettre √† jour les m√©triques
                update_metrics()
                
                # Attendre avant la prochaine v√©rification
                time.sleep(60)  # V√©rifier toutes les minutes
                
            except Exception as e:
                logger.error(f"‚ùå Erreur planificateur: {e}")
                time.sleep(30)  # Attendre avant de r√©essayer
    
    def _should_run_task(self, name: str, task: Dict[str, Any]) -> bool:
        """D√©termine si une t√¢che doit √™tre ex√©cut√©e"""
        schedule_time = task["schedule"]
        last_run = task["last_run"]
        
        # T√¢ches imm√©diates
        if schedule_time == "immediate":
            return True
        
        # T√¢ches programm√©es
        if schedule_time == "daily" and self._is_daily_time():
            return True
        
        if schedule_time == "hourly" and self._is_hourly_time():
            return True
        
        if schedule_time == "every_15min" and self._is_15min_time():
            return True
        
        # T√¢ches avec intervalle personnalis√©
        if schedule_time.startswith("every_"):
            interval = int(schedule_time.split("_")[1])
            if last_run:
                last_run_time = datetime.fromisoformat(last_run)
                if datetime.now() - last_run_time >= timedelta(minutes=interval):
                    return True
            else:
                return True
        
        return False
    
    def _is_daily_time(self) -> bool:
        """V√©rifie si c'est l'heure quotidienne (2h du matin)"""
        now = datetime.now()
        return now.hour == 2 and now.minute == 0
    
    def _is_hourly_time(self) -> bool:
        """V√©rifie si c'est l'heure (minute 0)"""
        now = datetime.now()
        return now.minute == 0
    
    def _is_15min_time(self) -> bool:
        """V√©rifie si c'est l'heure des 15 minutes"""
        now = datetime.now()
        return now.minute % 15 == 0


class SemanticPulseScheduler:
    """Planificateur sp√©cialis√© pour Semantic Pulse X"""
    
    def __init__(self):
        self.scheduler = TaskScheduler()
        self._setup_default_tasks()
    
    def _setup_default_tasks(self):
        """Configure les t√¢ches par d√©faut"""
        
        # ETL quotidien (2h du matin)
        self.scheduler.add_task(
            name="etl_daily",
            func=semantic_pulse_etl_flow,
            schedule_time="daily"
        )
        
        # Analyse √©motionnelle (toutes les heures)
        self.scheduler.add_task(
            name="emotion_analysis_hourly",
            func=emotion_analysis_flow,
            schedule_time="hourly",
            texts=[]  # Sera rempli dynamiquement
        )
        
        # Clustering th√©matique (toutes les 6 heures)
        self.scheduler.add_task(
            name="topic_clustering_6h",
            func=topic_clustering_flow,
            schedule_time="every_360"  # 6 heures = 360 minutes
        )
        
        # Monitoring (toutes les 15 minutes)
        self.scheduler.add_task(
            name="monitoring_15min",
            func=monitoring_flow,
            schedule_time="every_15min"
        )
        
        # Mise √† jour des m√©triques (toutes les 5 minutes)
        self.scheduler.add_task(
            name="update_metrics_5min",
            func=update_metrics,
            schedule_time="every_5"
        )
    
    def start(self):
        """D√©marre le planificateur"""
        self.scheduler.start_scheduler()
        logger.info("üöÄ Planificateur Semantic Pulse X d√©marr√©")
    
    def stop(self):
        """Arr√™te le planificateur"""
        self.scheduler.stop_scheduler()
        logger.info("üõë Planificateur Semantic Pulse X arr√™t√©")
    
    def get_status(self) -> Dict[str, Any]:
        """Retourne le statut du planificateur"""
        return self.scheduler.get_all_tasks_status()
    
    def run_task_now(self, task_name: str):
        """Ex√©cute une t√¢che imm√©diatement"""
        asyncio.run(self.scheduler.run_task(task_name))
    
    def add_custom_task(self, name: str, func: Callable, schedule_time: str, **kwargs):
        """Ajoute une t√¢che personnalis√©e"""
        self.scheduler.add_task(name, func, schedule_time, **kwargs)
    
    def remove_custom_task(self, name: str):
        """Supprime une t√¢che personnalis√©e"""
        self.scheduler.remove_task(name)


# Instance globale
semantic_scheduler = SemanticPulseScheduler()


def start_scheduler():
    """D√©marre le planificateur global"""
    semantic_scheduler.start()


def stop_scheduler():
    """Arr√™te le planificateur global"""
    semantic_scheduler.stop()


def get_scheduler_status():
    """Retourne le statut du planificateur global"""
    return semantic_scheduler.get_status()


if __name__ == "__main__":
    # D√©marrage du planificateur
    start_scheduler()
    
    try:
        # Boucle principale
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        stop_scheduler()
        print("üõë Planificateur arr√™t√©")
