"""
Dashboard Nuages de Mots - Semantic Pulse X
Interface de visualisation des vagues √©motionnelles
"""


import pandas as pd
import plotly.express as px
import streamlit as st

from app.frontend.visualization.wordcloud_generator import wordcloud_generator


def show_wordcloud_dashboard():
    """Affiche le dashboard des nuages de mots"""
    st.header("‚òÅÔ∏è Nuages de Mots - Vagues √âmotionnelles")

    # Charger les donn√©es
    data = load_processed_data()
    if data.empty:
        st.warning("‚ö†Ô∏è Aucune donn√©e disponible. Ex√©cutez d'abord le pipeline ETL.")
        return

    # Sidebar pour les contr√¥les
    with st.sidebar:
        st.subheader("üéõÔ∏è Contr√¥les")

        # S√©lection de l'√©motion
        emotions = data['emotion'].unique().tolist()
        selected_emotion = st.selectbox(
            "S√©lectionner une √©motion",
            ["Toutes"] + emotions,
            index=0
        )

        # Param√®tres du nuage
        st.subheader("‚öôÔ∏è Param√®tres")

        max_words = st.slider("Nombre max de mots", 20, 200, 100)
        width = st.slider("Largeur", 400, 1200, 800)
        height = st.slider("Hauteur", 300, 800, 400)

        # Fen√™tre temporelle
        time_window = st.selectbox(
            "Fen√™tre temporelle",
            ["hour", "day", "week"],
            index=1
        )

        # Bouton de g√©n√©ration
        if st.button("üîÑ G√©n√©rer les nuages", type="primary"):
            st.session_state.regenerate_wordclouds = True

    # Onglets principaux
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "‚òÅÔ∏è Nuage Principal",
        "üìä Comparaison √âmotions",
        "‚è∞ √âvolution Temporelle",
        "üìà Tendances",
        "üéØ Interactif"
    ])

    with tab1:
        show_main_wordcloud(data, selected_emotion, max_words, width, height)

    with tab2:
        show_emotion_comparison(data, max_words, width, height)

    with tab3:
        show_temporal_evolution(data, time_window, max_words)

    with tab4:
        show_trending_words(data, max_words)

    with tab5:
        show_interactive_wordcloud(data, selected_emotion)


def show_main_wordcloud(data: pd.DataFrame, emotion: str, max_words: int, width: int, height: int):
    """Affiche le nuage de mots principal"""
    st.subheader(f"‚òÅÔ∏è Nuage de mots - {emotion if emotion != 'Toutes' else 'Toutes les √©motions'}")

    # Pr√©parer les donn√©es
    if emotion != "Toutes":
        filtered_data = data[data['emotion'] == emotion]
    else:
        filtered_data = data

    if filtered_data.empty:
        st.warning(f"Aucune donn√©e pour l'√©motion '{emotion}'")
        return

    # G√©n√©rer le nuage de mots
    with st.spinner("G√©n√©ration du nuage de mots..."):
        texts = filtered_data['text'].tolist()
        emotions = filtered_data['emotion'].tolist()

        wordcloud_data = wordcloud_generator.generate_emotion_wordcloud(
            texts, emotions,
            emotion_filter=emotion if emotion != "Toutes" else None,
            max_words=max_words,
            width=width,
            height=height
        )

    # Afficher le nuage
    if wordcloud_data['image']:
        st.image(f"data:image/png;base64,{wordcloud_data['image']}", use_column_width=True)
    else:
        st.warning("Impossible de g√©n√©rer le nuage de mots")

    # Statistiques
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Total mots", wordcloud_data['total_words'])

    with col2:
        st.metric("Mots uniques", wordcloud_data['unique_words'])

    with col3:
        st.metric("Textes analys√©s", len(filtered_data))

    with col4:
        st.metric("√âmotion", wordcloud_data['emotion'])

    # Top mots
    if wordcloud_data['word_frequencies']:
        st.subheader("üìù Top mots")

        word_freq_df = pd.DataFrame(
            list(wordcloud_data['word_frequencies'].items()),
            columns=['Mot', 'Fr√©quence']
        )

        st.dataframe(word_freq_df, use_container_width=True)


def show_emotion_comparison(data: pd.DataFrame, max_words: int, width: int, height: int):
    """Affiche la comparaison des √©motions"""
    st.subheader("üìä Comparaison des √©motions")

    # G√©n√©rer les nuages de comparaison
    with st.spinner("G√©n√©ration des nuages de comparaison..."):
        emotions = data['emotion'].unique().tolist()
        comparison_data = wordcloud_generator.generate_emotion_comparison_wordclouds(
            data.to_dict('records'), emotions, max_words
        )

    if not comparison_data:
        st.warning("Aucune donn√©e disponible pour la comparaison")
        return

    # Afficher les nuages par √©motion
    for emotion, emotion_data in comparison_data.items():
        st.subheader(f"üòä {emotion.title()} ({emotion_data['count']} textes - {emotion_data['percentage']:.1f}%)")

        col1, col2 = st.columns([2, 1])

        with col1:
            if emotion_data['wordcloud']['image']:
                st.image(f"data:image/png;base64,{emotion_data['wordcloud']['image']}", use_column_width=True)

        with col2:
            # Top mots pour cette √©motion
            word_freq = emotion_data['wordcloud']['word_frequencies']
            if word_freq:
                st.write("**Top mots:**")
                for word, freq in list(word_freq.items())[:10]:
                    st.write(f"‚Ä¢ {word} ({freq})")

        st.divider()


def show_temporal_evolution(data: pd.DataFrame, time_window: str, max_words: int):
    """Affiche l'√©volution temporelle"""
    st.subheader("‚è∞ √âvolution temporelle des mots")

    # G√©n√©rer les nuages temporels
    with st.spinner("G√©n√©ration des nuages temporels..."):
        temporal_wordclouds = wordcloud_generator.generate_temporal_wordclouds(
            data.to_dict('records'), time_window, max_words
        )

    if not temporal_wordclouds:
        st.warning("Aucune donn√©e temporelle disponible")
        return

    # Afficher les nuages par p√©riode
    for i, wordcloud_data in enumerate(temporal_wordclouds):
        time_group = wordcloud_data['time_group']
        count = wordcloud_data['count']

        st.subheader(f"üìÖ {time_group} ({count} textes)")

        col1, col2 = st.columns([2, 1])

        with col1:
            if wordcloud_data['image']:
                st.image(f"data:image/png;base64,{wordcloud_data['image']}", use_column_width=True)

        with col2:
            # Statistiques
            st.metric("Mots totaux", wordcloud_data['total_words'])
            st.metric("Mots uniques", wordcloud_data['unique_words'])

            # Top mots
            if wordcloud_data['word_frequencies']:
                st.write("**Top mots:**")
                for word, freq in list(wordcloud_data['word_frequencies'].items())[:5]:
                    st.write(f"‚Ä¢ {word} ({freq})")

        if i < len(temporal_wordclouds) - 1:
            st.divider()


def show_trending_words(data: pd.DataFrame, max_words: int):
    """Affiche les mots en tendance"""
    st.subheader("üìà Mots en tendance")

    # G√©n√©rer le nuage de tendances
    with st.spinner("Analyse des tendances..."):
        trending_data = wordcloud_generator.generate_trending_words_cloud(
            data.to_dict('records'), time_periods=3, max_words=max_words
        )

    if not trending_data or not trending_data['image']:
        st.warning("Impossible de g√©n√©rer l'analyse des tendances")
        return

    # Afficher le nuage de tendances
    st.image(f"data:image/png;base64,{trending_data['image']}", use_column_width=True)

    # Statistiques des tendances
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìä Mots en tendance")
        if trending_data['trending_words']:
            trending_df = pd.DataFrame(
                list(trending_data['trending_words'].items()),
                columns=['Mot', 'Score de tendance']
            )
            st.dataframe(trending_df, use_container_width=True)

    with col2:
        st.subheader("üìà Scores de tendance")
        if trending_data['trending_scores']:
            scores_df = pd.DataFrame(
                list(trending_data['trending_scores'].items()),
                columns=['Mot', 'Score']
            )
            scores_df = scores_df.sort_values('Score', ascending=False)
            st.dataframe(scores_df, use_container_width=True)


def show_interactive_wordcloud(data: pd.DataFrame, emotion: str):
    """Affiche le nuage de mots interactif"""
    st.subheader("üéØ Nuage de mots interactif")

    # Pr√©parer les donn√©es
    if emotion != "Toutes":
        filtered_data = data[data['emotion'] == emotion]
    else:
        filtered_data = data

    if filtered_data.empty:
        st.warning(f"Aucune donn√©e pour l'√©motion '{emotion}'")
        return

    # G√©n√©rer le graphique interactif
    with st.spinner("G√©n√©ration du graphique interactif..."):
        fig = wordcloud_generator.generate_interactive_wordcloud(
            filtered_data.to_dict('records'),
            emotion if emotion != "Toutes" else None
        )

    # Afficher le graphique
    st.plotly_chart(fig, use_container_width=True)

    # Statistiques d√©taill√©es
    st.subheader("üìä Statistiques d√©taill√©es")

    filtered_data['text'].tolist()
    stats = wordcloud_generator.get_word_statistics(filtered_data.to_dict('records'))

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Mots totaux", stats.get('total_words', 0))

    with col2:
        st.metric("Mots uniques", stats.get('unique_words', 0))

    with col3:
        st.metric("Longueur moyenne", f"{stats.get('average_word_length', 0):.1f}")

    with col4:
        st.metric("Richesse vocabulaire", f"{stats.get('vocabulary_richness', 0):.2f}")

    # Graphique de fr√©quence
    if stats.get('most_common'):
        st.subheader("üìà Fr√©quence des mots")

        most_common = stats['most_common']
        words = list(most_common.keys())[:20]
        frequencies = list(most_common.values())[:20]

        fig_freq = px.bar(
            x=frequencies,
            y=words,
            orientation='h',
            title="Top 20 des mots les plus fr√©quents",
            labels={'x': 'Fr√©quence', 'y': 'Mots'}
        )

        fig_freq.update_layout(height=600)
        st.plotly_chart(fig_freq, use_container_width=True)


def load_processed_data() -> pd.DataFrame:
    """Charge les donn√©es trait√©es"""
    try:
        from pathlib import Path
        data_path = Path("data/processed/final_data.parquet")
        if data_path.exists():
            return pd.read_parquet(data_path)
        else:
            return pd.DataFrame()
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es: {e}")
        return pd.DataFrame()


def show_wordcloud_controls():
    """Affiche les contr√¥les avanc√©s"""
    st.subheader("üéõÔ∏è Contr√¥les avanc√©s")

    # Param√®tres de g√©n√©ration
    col1, col2 = st.columns(2)

    with col1:
        st.number_input("Seuil de fr√©quence minimum", min_value=1, value=2)
        st.selectbox("Couleur de fond", ["blanc", "noir", "transparent"])

    with col2:
        st.selectbox("Police", ["Arial", "Times New Roman", "Courier New"])
        st.slider("Opacit√©", 0.0, 1.0, 0.8)

    # Filtres avanc√©s
    st.subheader("üîç Filtres avanc√©s")

    col1, col2 = st.columns(2)

    with col1:
        st.text_input("Mots √† exclure (s√©par√©s par des virgules)")
        st.text_input("Mots √† inclure uniquement")

    with col2:
        st.number_input("Longueur minimum des mots", min_value=1, value=3)
        st.number_input("Longueur maximum des mots", min_value=1, value=20)


if __name__ == "__main__":
    st.set_page_config(
        page_title="Nuages de Mots - Semantic Pulse X",
        page_icon="‚òÅÔ∏è",
        layout="wide"
    )

    show_wordcloud_dashboard()
