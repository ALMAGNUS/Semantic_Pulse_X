#!/usr/bin/env python3
"""
Correcteur d'ajustements mineurs - Semantic Pulse X
Corrige les derniers d√©tails pour un projet parfait
"""

import os
import logging
from pathlib import Path
from datetime import datetime

# Configuration du logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MinorAdjustmentsCorrector:
    """Correcteur d'ajustements mineurs"""
    
    def __init__(self):
        self.adjustments_applied = []
        
    def fix_1_create_missing_readme(self):
        """Cr√©e le README.md manquant dans docs/"""
        logger.info("üîß AJUSTEMENT 1: README.md dans docs/")
        
        docs_dir = Path('docs')
        readme_file = docs_dir / 'README.md'
        
        if not readme_file.exists():
            readme_content = """# üìö Documentation Semantic Pulse X

## üìñ Guides disponibles

- **ARCHITECTURE.md** - Architecture technique du projet
- **DATABASE_SCHEMA.md** - Sch√©ma de base de donn√©es
- **DEPLOYMENT.md** - Guide de d√©ploiement
- **INSTALLATION_GUIDE.md** - Guide d'installation
- **JURY_DEMONSTRATION_GUIDE.md** - Guide de d√©monstration
- **MERISE_MODELING.md** - Mod√©lisation Merise
- **PHASE2_APIS_EXTERNES.md** - Phase 2 APIs externes
- **PHASE2_GUIDE_COMPLET.md** - Guide complet Phase 2
- **RGPD.md** - Conformit√© RGPD
- **STATUS_APPLICATION.md** - Statut de l'application
- **SUCCESS_FINAL.md** - R√©sultats finaux
- **TECHNOLOGIES_BIG_DATA.md** - Technologies Big Data
- **TRAITEMENT_DONNEES_DETAILLE.md** - Traitement des donn√©es
- **WORDCLOUD_GUIDE.md** - Guide des nuages de mots

## üöÄ D√©marrage rapide

1. **Installation** : Voir `INSTALLATION_GUIDE.md`
2. **D√©ploiement** : Voir `DEPLOYMENT.md`
3. **D√©monstration** : Voir `JURY_DEMONSTRATION_GUIDE.md`

## üìä Statut du projet

Le projet Semantic Pulse X est **OP√âRATIONNEL** avec toutes les fonctionnalit√©s impl√©ment√©es.

- ‚úÖ **Phase 1** : Big Data (Parquet, MinIO, PostgreSQL)
- ‚úÖ **Phase 2** : APIs externes (YouTube, Web Scraping)
- ‚úÖ **IA** : Classification √©motionnelle, clustering th√©matique
- ‚úÖ **RGPD** : Anonymisation et pseudonymisation
- ‚úÖ **Monitoring** : Prometheus + Grafana
- ‚úÖ **Interface** : Streamlit + FastAPI

## üéØ Prochaines √©tapes

- **Phase 3** : Module pr√©dictif (Prophet, ARIMA, LSTM)
- **Alertes** : Syst√®me d'alerte pr√©dictive
- **Visualisation** : Graphiques temporels avanc√©s
"""
            
            with open(readme_file, 'w', encoding='utf-8') as f:
                f.write(readme_content)
            
            logger.info("‚úÖ README.md cr√©√© dans docs/")
            self.adjustments_applied.append("README.md cr√©√© dans docs/")
        else:
            logger.info("‚úÖ README.md existe d√©j√† dans docs/")
    
    def fix_2_ensure_logs_directory(self):
        """S'assure que le dossier logs/ existe"""
        logger.info("üîß AJUSTEMENT 2: Dossier logs/")
        
        logs_dir = Path('logs')
        if not logs_dir.exists():
            logs_dir.mkdir(parents=True, exist_ok=True)
            
            # Cr√©er un fichier .gitkeep pour garder le dossier
            gitkeep_file = logs_dir / '.gitkeep'
            gitkeep_file.write_text('# Dossier pour les logs\n')
            
            logger.info("‚úÖ Dossier logs/ cr√©√©")
            self.adjustments_applied.append("Dossier logs/ cr√©√©")
        else:
            logger.info("‚úÖ Dossier logs/ existe d√©j√†")
    
    def fix_3_verify_env_completeness(self):
        """V√©rifie que le .env est complet"""
        logger.info("üîß AJUSTEMENT 3: V√©rification .env")
        
        env_file = Path('.env')
        if env_file.exists():
            try:
                with open(env_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # V√©rifier les variables critiques
                critical_vars = [
                    'DATABASE_URL',
                    'MINIO_ENDPOINT',
                    'MINIO_ACCESS_KEY',
                    'MINIO_SECRET_KEY',
                    'REDIS_URL',
                    'OLLAMA_HOST',
                    'YOUTUBE_API_KEY'
                ]
                
                missing_vars = []
                for var in critical_vars:
                    if f"{var}=" not in content:
                        missing_vars.append(var)
                
                if missing_vars:
                    logger.warning(f"‚ö†Ô∏è Variables manquantes dans .env: {missing_vars}")
                    logger.info("üí° Ajoutez ces variables manuellement dans .env")
                else:
                    logger.info("‚úÖ .env contient toutes les variables critiques")
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur lecture .env: {e}")
        else:
            logger.warning("‚ö†Ô∏è Fichier .env manquant")
    
    def fix_4_check_docker_compose_ports(self):
        """V√©rifie que tous les ports sont expos√©s dans docker-compose"""
        logger.info("üîß AJUSTEMENT 4: Ports Docker Compose")
        
        docker_file = Path('docker-compose.yml')
        if docker_file.exists():
            try:
                with open(docker_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # V√©rifier les ports critiques
                required_ports = ['8000', '8505', '5432', '9000', '6379', '9090', '3000']
                missing_ports = []
                
                for port in required_ports:
                    if f":{port}" not in content:
                        missing_ports.append(port)
                
                if missing_ports:
                    logger.warning(f"‚ö†Ô∏è Ports manquants dans docker-compose: {missing_ports}")
                    logger.info("üí° V√©rifiez que tous les services exposent leurs ports")
                else:
                    logger.info("‚úÖ Tous les ports critiques sont expos√©s")
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur lecture docker-compose.yml: {e}")
        else:
            logger.error("‚ùå docker-compose.yml manquant")
    
    def fix_5_verify_data_directories(self):
        """V√©rifie que tous les dossiers de donn√©es existent"""
        logger.info("üîß AJUSTEMENT 5: Dossiers de donn√©es")
        
        required_dirs = [
            'data/raw/kaggle_tweets',
            'data/raw/external_apis',
            'data/raw/web_scraping',
            'data/processed/bigdata',
            'data/processed',
            'data/backups'
        ]
        
        for dir_path in required_dirs:
            path = Path(dir_path)
            if not path.exists():
                path.mkdir(parents=True, exist_ok=True)
                
                # Cr√©er un fichier .gitkeep
                gitkeep_file = path / '.gitkeep'
                gitkeep_file.write_text('# Dossier pour les donn√©es\n')
                
                logger.info(f"‚úÖ Cr√©√©: {dir_path}")
                self.adjustments_applied.append(f"Dossier cr√©√©: {dir_path}")
            else:
                logger.info(f"‚úÖ Existe: {dir_path}")
    
    def fix_6_create_startup_scripts(self):
        """Cr√©e des scripts de d√©marrage simples"""
        logger.info("üîß AJUSTEMENT 6: Scripts de d√©marrage")
        
        # Script de d√©marrage Windows
        start_script = Path('start_app.bat')
        if not start_script.exists():
            bat_content = """@echo off
echo üöÄ D√©marrage Semantic Pulse X
echo.

echo üì¶ Installation des d√©pendances...
pip install -r requirements.txt

echo.
echo üê≥ D√©marrage des services Docker...
docker-compose up -d

echo.
echo ‚è≥ Attente du d√©marrage des services...
timeout /t 10

echo.
echo üöÄ D√©marrage FastAPI...
start cmd /k "python -m uvicorn app.backend.main:app --host 0.0.0.0 --port 8000 --reload"

echo.
echo üì± D√©marrage Streamlit...
start cmd /k "streamlit run app/frontend/streamlit_app.py --server.port 8505"

echo.
echo ‚úÖ Application d√©marr√©e!
echo üìä FastAPI: http://localhost:8000
echo üì± Streamlit: http://localhost:8505
echo üê≥ Docker: docker-compose up -d
pause
"""
            
            with open(start_script, 'w', encoding='utf-8') as f:
                f.write(bat_content)
            
            logger.info("‚úÖ Script de d√©marrage Windows cr√©√©")
            self.adjustments_applied.append("Script start_app.bat cr√©√©")
        
        # Script de d√©marrage Linux/Mac
        start_script_sh = Path('start_app.sh')
        if not start_script_sh.exists():
            sh_content = """#!/bin/bash
echo "üöÄ D√©marrage Semantic Pulse X"
echo

echo "üì¶ Installation des d√©pendances..."
pip install -r requirements.txt

echo
echo "üê≥ D√©marrage des services Docker..."
docker-compose up -d

echo
echo "‚è≥ Attente du d√©marrage des services..."
sleep 10

echo
echo "üöÄ D√©marrage FastAPI..."
python -m uvicorn app.backend.main:app --host 0.0.0.0 --port 8000 --reload &
FASTAPI_PID=$!

echo
echo "üì± D√©marrage Streamlit..."
streamlit run app/frontend/streamlit_app.py --server.port 8505 &
STREAMLIT_PID=$!

echo
echo "‚úÖ Application d√©marr√©e!"
echo "üìä FastAPI: http://localhost:8000"
echo "üì± Streamlit: http://localhost:8505"
echo "üê≥ Docker: docker-compose up -d"
echo
echo "Appuyez sur Ctrl+C pour arr√™ter..."

# Attendre l'interruption
trap "kill $FASTAPI_PID $STREAMLIT_PID; exit" INT
wait
"""
            
            with open(start_script_sh, 'w', encoding='utf-8') as f:
                f.write(sh_content)
            
            # Rendre ex√©cutable
            os.chmod(start_script_sh, 0o755)
            
            logger.info("‚úÖ Script de d√©marrage Linux/Mac cr√©√©")
            self.adjustments_applied.append("Script start_app.sh cr√©√©")
    
    def run_all_adjustments(self):
        """Ex√©cute tous les ajustements mineurs"""
        logger.info("üîß AJUSTEMENTS MINEURS - SEMANTIC PULSE X")
        logger.info("=" * 60)
        
        # Ex√©cuter tous les ajustements
        self.fix_1_create_missing_readme()
        self.fix_2_ensure_logs_directory()
        self.fix_3_verify_env_completeness()
        self.fix_4_check_docker_compose_ports()
        self.fix_5_verify_data_directories()
        self.fix_6_create_startup_scripts()
        
        # R√©sum√©
        logger.info("\n" + "=" * 60)
        logger.info("üìä R√âSUM√â DES AJUSTEMENTS")
        logger.info("=" * 60)
        logger.info(f"üîß Ajustements appliqu√©s: {len(self.adjustments_applied)}")
        
        for i, adjustment in enumerate(self.adjustments_applied, 1):
            logger.info(f"   {i}. {adjustment}")
        
        if self.adjustments_applied:
            logger.info("\n‚úÖ Ajustements mineurs termin√©s!")
            logger.info("üéØ Le projet est maintenant PARFAIT pour Docker!")
        else:
            logger.info("\n‚úÖ Aucun ajustement n√©cessaire!")
            logger.info("üéâ Le projet √©tait d√©j√† parfait!")
        
        logger.info("=" * 60)
        
        return len(self.adjustments_applied)

def main():
    """Fonction principale"""
    logger.info("üîß AJUSTEMENTS MINEURS")
    
    corrector = MinorAdjustmentsCorrector()
    
    try:
        adjustments_count = corrector.run_all_adjustments()
        return adjustments_count >= 0
    except Exception as e:
        logger.error(f"‚ùå Erreur lors des ajustements: {e}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)




