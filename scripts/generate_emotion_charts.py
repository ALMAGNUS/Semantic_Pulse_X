#!/usr/bin/env python3
"""
Visualisation des Graphiques √âmotionnels - Semantic Pulse X
Cr√©e des graphiques pour analyser les donn√©es du graphe social des √©motions
"""

import json
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from collections import Counter
import logging
import os

# Configuration du logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration matplotlib pour le fran√ßais
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['figure.figsize'] = (12, 8)

def load_graph_data(file_path="data/processed/social_graph_simple.json"):
    """Charge les donn√©es du graphe social."""
    logger.info(f"üìä Chargement des donn√©es: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        logger.info(f"‚úÖ Donn√©es charg√©es: {data['metadata']['total_emotions']} √©motions, {data['metadata']['total_themes']} th√®mes")
        return data
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du chargement: {e}")
        return None

def create_emotion_frequency_chart(data):
    """Cr√©e un graphique des fr√©quences des √©motions."""
    logger.info("üìä Cr√©ation du graphique des fr√©quences √©motionnelles")
    
    emotions = data['emotions']
    emotion_names = list(emotions.keys())
    frequencies = [emotions[emotion]['frequency'] for emotion in emotion_names]
    
    plt.figure(figsize=(10, 6))
    bars = plt.bar(emotion_names, frequencies, color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD'])
    
    # Ajouter les valeurs sur les barres
    for bar, freq in zip(bars, frequencies):
        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                str(freq), ha='center', va='bottom', fontweight='bold')
    
    plt.title('Fr√©quence des √âmotions - Graphe Social', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('√âmotions', fontsize=12, fontweight='bold')
    plt.ylabel('Fr√©quence', fontsize=12, fontweight='bold')
    plt.xticks(rotation=45)
    plt.grid(axis='y', alpha=0.3)
    
    # Sauvegarder
    output_path = "data/processed/emotion_frequency_chart.png"
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    logger.info(f"‚úÖ Graphique sauvegard√©: {output_path}")
    return output_path

def create_theme_emotion_matrix(data):
    """Cr√©e une matrice de chaleur √©motion-th√®me."""
    logger.info("üî• Cr√©ation de la matrice √©motion-th√®me")
    
    emotions = list(data['emotions'].keys())
    themes = list(data['themes'].keys())
    
    # Cr√©er la matrice
    matrix = np.zeros((len(emotions), len(themes)))
    
    for i, emotion in enumerate(emotions):
        for j, theme in enumerate(themes):
            if theme in data['emotions'][emotion]['themes']:
                matrix[i][j] = data['emotions'][emotion]['frequency']
    
    plt.figure(figsize=(10, 8))
    sns.heatmap(matrix, 
                xticklabels=themes, 
                yticklabels=emotions,
                annot=True, 
                fmt='.0f',
                cmap='YlOrRd',
                cbar_kws={'label': 'Fr√©quence'})
    
    plt.title('Matrice √âmotion-Th√®me - Relations', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Th√®mes', fontsize=12, fontweight='bold')
    plt.ylabel('√âmotions', fontsize=12, fontweight='bold')
    plt.xticks(rotation=45)
    plt.yticks(rotation=0)
    
    # Sauvegarder
    output_path = "data/processed/emotion_theme_matrix.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    logger.info(f"‚úÖ Matrice sauvegard√©e: {output_path}")
    return output_path

def create_source_distribution_chart(data):
    """Cr√©e un graphique de la distribution par source."""
    logger.info("üì± Cr√©ation du graphique de distribution par source")
    
    # Compter les √©motions par source
    source_counts = Counter()
    for emotion_data in data['emotions'].values():
        for source in emotion_data['sources']:
            source_counts[source] += emotion_data['frequency']
    
    sources = list(source_counts.keys())
    counts = list(source_counts.values())
    
    plt.figure(figsize=(8, 8))
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4']
    wedges, texts, autotexts = plt.pie(counts, labels=sources, autopct='%1.1f%%', 
                                      colors=colors[:len(sources)], startangle=90)
    
    # Am√©liorer l'apparence
    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontweight('bold')
    
    plt.title('Distribution des √âmotions par Source', fontsize=16, fontweight='bold', pad=20)
    
    # Sauvegarder
    output_path = "data/processed/source_distribution_chart.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    logger.info(f"‚úÖ Graphique circulaire sauvegard√©: {output_path}")
    return output_path

def create_cluster_visualization(data):
    """Cr√©e une visualisation des clusters d'√©motions."""
    logger.info("üîç Cr√©ation de la visualisation des clusters")
    
    clusters = data['clusters']
    
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Couleurs pour chaque cluster
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']
    
    y_pos = 0
    for i, (cluster_name, emotions) in enumerate(clusters.items()):
        # Cr√©er un rectangle pour chaque cluster
        rect = plt.Rectangle((0, y_pos), 10, 1, 
                           facecolor=colors[i % len(colors)], 
                           alpha=0.7, 
                           edgecolor='black',
                           linewidth=2)
        ax.add_patch(rect)
        
        # Ajouter le nom du cluster
        ax.text(5, y_pos + 0.5, cluster_name.replace('_', ' ').title(), 
               ha='center', va='center', fontweight='bold', fontsize=12)
        
        # Ajouter les √©motions
        emotion_text = ', '.join(emotions)
        ax.text(5, y_pos + 0.2, emotion_text, 
               ha='center', va='center', fontsize=10)
        
        y_pos += 1.5
    
    ax.set_xlim(0, 10)
    ax.set_ylim(-0.5, y_pos - 0.5)
    ax.set_title('Clusters d\'√âmotions - Groupement Th√©matique', 
                fontsize=16, fontweight='bold', pad=20)
    ax.axis('off')
    
    # Sauvegarder
    output_path = "data/processed/cluster_visualization.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    logger.info(f"‚úÖ Visualisation des clusters sauvegard√©e: {output_path}")
    return output_path

def create_timeline_chart(data):
    """Cr√©e un graphique temporel des √©motions."""
    logger.info("‚è∞ Cr√©ation du graphique temporel")
    
    # Extraire les donn√©es temporelles
    timeline_data = []
    for relation, interactions in data['relations'].items():
        emotion = relation.split('-')[0]
        for interaction in interactions:
            timeline_data.append({
                'emotion': emotion,
                'timestamp': interaction['timestamp'],
                'source': interaction['source']
            })
    
    # Convertir en DataFrame
    df = pd.DataFrame(timeline_data)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['hour'] = df['timestamp'].dt.hour
    
    # Compter les √©motions par heure
    emotion_hourly = df.groupby(['hour', 'emotion']).size().unstack(fill_value=0)
    
    plt.figure(figsize=(14, 8))
    emotion_hourly.plot(kind='bar', stacked=True, 
                       color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD'])
    
    plt.title('√âvolution Temporelle des √âmotions', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Heure de la Journ√©e', fontsize=12, fontweight='bold')
    plt.ylabel('Nombre d\'Occurrences', fontsize=12, fontweight='bold')
    plt.legend(title='√âmotions', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.xticks(rotation=45)
    plt.grid(axis='y', alpha=0.3)
    
    # Sauvegarder
    output_path = "data/processed/timeline_chart.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    logger.info(f"‚úÖ Graphique temporel sauvegard√©: {output_path}")
    return output_path

def create_comprehensive_dashboard(data):
    """Cr√©e un tableau de bord complet avec tous les graphiques."""
    logger.info("üìä Cr√©ation du tableau de bord complet")
    
    fig = plt.figure(figsize=(20, 16))
    
    # Configuration de la grille
    gs = fig.add_gridspec(3, 3, hspace=0.3, wspace=0.3)
    
    # 1. Fr√©quences des √©motions (en haut √† gauche)
    ax1 = fig.add_subplot(gs[0, 0])
    emotions = list(data['emotions'].keys())
    frequencies = [data['emotions'][emotion]['frequency'] for emotion in emotions]
    bars = ax1.bar(emotions, frequencies, color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD'])
    ax1.set_title('Fr√©quences des √âmotions', fontweight='bold')
    ax1.set_ylabel('Fr√©quence')
    ax1.tick_params(axis='x', rotation=45)
    
    # 2. Distribution par source (en haut au centre)
    ax2 = fig.add_subplot(gs[0, 1])
    source_counts = Counter()
    for emotion_data in data['emotions'].values():
        for source in emotion_data['sources']:
            source_counts[source] += emotion_data['frequency']
    ax2.pie(source_counts.values(), labels=source_counts.keys(), autopct='%1.1f%%')
    ax2.set_title('Distribution par Source', fontweight='bold')
    
    # 3. Matrice √©motion-th√®me (en haut √† droite)
    ax3 = fig.add_subplot(gs[0, 2])
    themes = list(data['themes'].keys())
    matrix = np.zeros((len(emotions), len(themes)))
    for i, emotion in enumerate(emotions):
        for j, theme in enumerate(themes):
            if theme in data['emotions'][emotion]['themes']:
                matrix[i][j] = data['emotions'][emotion]['frequency']
    im = ax3.imshow(matrix, cmap='YlOrRd')
    ax3.set_xticks(range(len(themes)))
    ax3.set_yticks(range(len(emotions)))
    ax3.set_xticklabels(themes, rotation=45)
    ax3.set_yticklabels(emotions)
    ax3.set_title('Matrice √âmotion-Th√®me', fontweight='bold')
    
    # 4. Clusters (au milieu)
    ax4 = fig.add_subplot(gs[1, :])
    clusters = data['clusters']
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']
    y_pos = 0
    for i, (cluster_name, cluster_emotions) in enumerate(clusters.items()):
        rect = plt.Rectangle((0, y_pos), 10, 1, 
                           facecolor=colors[i % len(colors)], 
                           alpha=0.7, 
                           edgecolor='black')
        ax4.add_patch(rect)
        ax4.text(5, y_pos + 0.5, f"{cluster_name.replace('_', ' ').title()}: {', '.join(cluster_emotions)}", 
                ha='center', va='center', fontweight='bold')
        y_pos += 1.5
    ax4.set_xlim(0, 10)
    ax4.set_ylim(-0.5, y_pos - 0.5)
    ax4.set_title('Clusters d\'√âmotions', fontweight='bold')
    ax4.axis('off')
    
    # 5. Statistiques textuelles (en bas)
    ax5 = fig.add_subplot(gs[2, :])
    ax5.axis('off')
    
    # Cr√©er un r√©sum√© textuel
    summary_text = f"""
    üìä R√âSUM√â DU GRAPHE SOCIAL DES √âMOTIONS
    
    ‚Ä¢ Total √âmotions: {data['metadata']['total_emotions']}
    ‚Ä¢ Total Th√®mes: {data['metadata']['total_themes']}
    ‚Ä¢ Total Relations: {data['metadata']['total_relations']}
    ‚Ä¢ Clusters Cr√©√©s: {len(data['clusters'])}
    
    üèÜ √âMOTIONS LES PLUS FR√âQUENTES:
    """
    
    emotion_freqs = [(emotion, data['emotions'][emotion]['frequency']) for emotion in emotions]
    emotion_freqs.sort(key=lambda x: x[1], reverse=True)
    
    for emotion, freq in emotion_freqs:
        summary_text += f"    ‚Ä¢ {emotion}: {freq} occurrences\n"
    
    ax5.text(0.1, 0.9, summary_text, transform=ax5.transAxes, fontsize=12,
            verticalalignment='top', fontfamily='monospace')
    
    plt.suptitle('TABLEAU DE BORD - GRAPHE SOCIAL DES √âMOTIONS', 
                fontsize=20, fontweight='bold', y=0.98)
    
    # Sauvegarder
    output_path = "data/processed/comprehensive_dashboard.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    logger.info(f"‚úÖ Tableau de bord sauvegard√©: {output_path}")
    return output_path

def main():
    """Fonction principale de visualisation."""
    logger.info("üé® G√âN√âRATION DES GRAPHIQUES √âMOTIONNELS")
    logger.info("=" * 60)
    
    # Charger les donn√©es
    data = load_graph_data()
    if not data:
        logger.error("‚ùå Impossible de charger les donn√©es")
        return False
    
    try:
        # Cr√©er tous les graphiques
        charts = []
        
        logger.info("üìä G√©n√©ration des graphiques individuels...")
        charts.append(create_emotion_frequency_chart(data))
        charts.append(create_theme_emotion_matrix(data))
        charts.append(create_source_distribution_chart(data))
        charts.append(create_cluster_visualization(data))
        charts.append(create_timeline_chart(data))
        
        logger.info("üìä G√©n√©ration du tableau de bord complet...")
        charts.append(create_comprehensive_dashboard(data))
        
        # R√©sum√© final
        logger.info("\n" + "=" * 60)
        logger.info("üéâ GRAPHIQUES G√âN√âR√âS AVEC SUCC√àS!")
        logger.info("=" * 60)
        logger.info("üìä Graphiques cr√©√©s:")
        for i, chart in enumerate(charts, 1):
            logger.info(f"   {i}. {os.path.basename(chart)}")
        
        logger.info("\nüìÅ Tous les graphiques sont sauvegard√©s dans: data/processed/")
        logger.info("üé® Vous pouvez maintenant visualiser les donn√©es √©motionnelles!")
        logger.info("=" * 60)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration des graphiques: {e}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)




