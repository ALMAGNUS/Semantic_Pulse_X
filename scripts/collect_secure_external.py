#!/usr/bin/env python3
"""
Collecte s√©curis√©e Instagram et YouTube - Phase 2 - Semantic Pulse X
Utilisation des variables d'environnement pour la s√©curit√©
"""

import os
import requests
import logging
import json
from pathlib import Path
from datetime import datetime
import time
import pandas as pd
from dotenv import load_dotenv

# Chargement des variables d'environnement
load_dotenv()

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SecureInstagramCollector:
    """Collecteur Instagram s√©curis√© avec variables d'environnement"""
    
    def __init__(self):
        self.access_token = os.getenv('INSTAGRAM_ACCESS_TOKEN')
        self.base_url = "https://graph.instagram.com"
        
        if not self.access_token:
            logger.warning("‚ö†Ô∏è INSTAGRAM_ACCESS_TOKEN non d√©finie dans .env")
        else:
            logger.info("üì∏ Instagram Collector initialis√© (s√©curis√©)")
    
    def test_connection(self):
        """Test de connexion Instagram"""
        if not self.access_token:
            return False
            
        try:
            url = f"{self.base_url}/me"
            params = {
                'fields': 'id,username,account_type',
                'access_token': self.access_token
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ Instagram connect√©: {data.get('username', 'N/A')}")
                return True
            else:
                logger.error(f"‚ùå Erreur Instagram: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion Instagram: {e}")
            return False
    
    def collect_data(self, limit=5):
        """Collecte des donn√©es Instagram"""
        if not self.access_token:
            logger.warning("‚ö†Ô∏è Token Instagram manquant")
            return []
        
        try:
            url = f"{self.base_url}/me/media"
            params = {
                'fields': 'id,caption,media_type,media_url,timestamp',
                'limit': limit,
                'access_token': self.access_token
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                media_list = data.get('data', [])
                logger.info(f"üì∏ {len(media_list)} m√©dias Instagram collect√©s")
                
                # Formatage s√©curis√© (anonymisation)
                formatted_data = []
                for media in media_list:
                    formatted_data.append({
                        'source': 'instagram',
                        'media_id': f"IG_{media.get('id', '')[:8]}...",  # Anonymis√©
                        'caption': media.get('caption', '')[:200],  # Limit√©
                        'media_type': media.get('media_type'),
                        'timestamp': media.get('timestamp'),
                        'collected_at': datetime.now().isoformat(),
                        'anonymized': True
                    })
                
                return formatted_data
            else:
                logger.error(f"‚ùå Erreur collecte Instagram: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå Erreur collecte Instagram: {e}")
            return []

class SecureYouTubeCollector:
    """Collecteur YouTube s√©curis√© avec variables d'environnement"""
    
    def __init__(self):
        self.api_key = os.getenv('YOUTUBE_API_KEY')
        self.base_url = "https://www.googleapis.com/youtube/v3"
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è YOUTUBE_API_KEY non d√©finie dans .env")
        else:
            logger.info("üì∫ YouTube Collector initialis√© (s√©curis√©)")
    
    def test_connection(self):
        """Test de connexion YouTube"""
        if not self.api_key:
            return False
            
        try:
            url = f"{self.base_url}/search"
            params = {
                'part': 'snippet',
                'q': 'test',
                'type': 'video',
                'maxResults': 1,
                'key': self.api_key
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                logger.info("‚úÖ YouTube API connect√©e")
                return True
            else:
                logger.error(f"‚ùå Erreur YouTube: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion YouTube: {e}")
            return False
    
    def collect_data(self, query="actualit√©s √©motions", max_results=5):
        """Collecte des donn√©es YouTube"""
        if not self.api_key:
            logger.warning("‚ö†Ô∏è Cl√© YouTube manquante")
            return []
        
        try:
            url = f"{self.base_url}/search"
            params = {
                'part': 'snippet',
                'q': query,
                'type': 'video',
                'maxResults': max_results,
                'key': self.api_key
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                videos = data.get('items', [])
                logger.info(f"üì∫ {len(videos)} vid√©os YouTube collect√©es")
                
                # Formatage s√©curis√© (anonymisation)
                formatted_data = []
                for video in videos:
                    snippet = video.get('snippet', {})
                    formatted_data.append({
                        'source': 'youtube',
                        'video_id': f"YT_{video.get('id', {}).get('videoId', '')[:8]}...",  # Anonymis√©
                        'title': snippet.get('title', '')[:100],  # Limit√©
                        'description': snippet.get('description', '')[:200],  # Limit√©
                        'channel_title': snippet.get('channelTitle', '')[:50],  # Limit√©
                        'published_at': snippet.get('publishedAt'),
                        'collected_at': datetime.now().isoformat(),
                        'anonymized': True
                    })
                
                return formatted_data
            else:
                logger.error(f"‚ùå Erreur collecte YouTube: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå Erreur collecte YouTube: {e}")
            return []

def save_to_minio_secure(data, data_type):
    """Sauvegarde s√©curis√©e vers MinIO"""
    logger.info(f"üíæ Sauvegarde s√©curis√©e {data_type} vers MinIO")
    
    try:
        from minio import Minio
        
        # Connexion MinIO
        minio_client = Minio('localhost:9000', 'admin', 'admin123', secure=False)
        
        # Conversion en JSON avec anonymisation
        json_data = json.dumps(data, indent=2, ensure_ascii=False)
        
        # Upload vers MinIO
        object_name = f"external_apis/secure_{data_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        minio_client.put_object(
            'semantic-pulse-data',
            object_name,
            data=json_data.encode('utf-8'),
            length=len(json_data.encode('utf-8')),
            content_type='application/json'
        )
        
        logger.info(f"‚úÖ Donn√©es {data_type} sauvegard√©es s√©curis√©ment: {object_name}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur sauvegarde MinIO: {e}")
        return False

def main():
    """Fonction principale de collecte s√©curis√©e"""
    logger.info("üîê COLLECTE S√âCURIS√âE INSTAGRAM & YOUTUBE - PHASE 2")
    logger.info("=" * 70)
    
    # V√©rification du fichier .env
    if not os.path.exists('.env'):
        logger.warning("‚ö†Ô∏è Fichier .env non trouv√©")
        logger.info("üí° Copiez env.template vers .env et remplissez vos cl√©s")
        return False
    
    all_data = []
    
    # Collecte Instagram
    instagram_collector = SecureInstagramCollector()
    if instagram_collector.access_token:
        if instagram_collector.test_connection():
            instagram_data = instagram_collector.collect_data(limit=3)
            all_data.extend(instagram_data)
            
            if instagram_data:
                save_to_minio_secure(instagram_data, "instagram")
        else:
            logger.error("‚ùå Connexion Instagram √©chou√©e")
    else:
        logger.info("‚è≠Ô∏è Instagram ignor√© (pas de token)")
    
    # Collecte YouTube
    youtube_collector = SecureYouTubeCollector()
    if youtube_collector.api_key:
        if youtube_collector.test_connection():
            youtube_data = youtube_collector.collect_data(max_results=3)
            all_data.extend(youtube_data)
            
            if youtube_data:
                save_to_minio_secure(youtube_data, "youtube")
        else:
            logger.error("‚ùå Connexion YouTube √©chou√©e")
    else:
        logger.info("‚è≠Ô∏è YouTube ignor√© (pas de cl√© API)")
    
    # Sauvegarde locale s√©curis√©e
    if all_data:
        output_dir = Path("data/raw/external_apis")
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # JSON s√©curis√©
        json_file = output_dir / f"secure_external_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(all_data, f, indent=2, ensure_ascii=False)
        
        # CSV s√©curis√©
        csv_file = output_dir / f"secure_external_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        df = pd.DataFrame(all_data)
        df.to_csv(csv_file, index=False, encoding='utf-8')
        
        # R√©sum√© s√©curis√©
        logger.info("\n" + "=" * 70)
        logger.info("üìä R√âSUM√â COLLECTE S√âCURIS√âE")
        logger.info("=" * 70)
        logger.info(f"üìà Total donn√©es collect√©es: {len(all_data)}")
        logger.info("üîê Toutes les donn√©es sont anonymis√©es")
        
        # Par source
        sources = {}
        for item in all_data:
            source = item.get('source', 'unknown')
            sources[source] = sources.get(source, 0) + 1
        
        logger.info("üìã R√©partition par source:")
        for source, count in sources.items():
            logger.info(f"   {source}: {count} √©l√©ments")
        
        logger.info(f"üíæ Fichiers cr√©√©s:")
        logger.info(f"   JSON: {json_file}")
        logger.info(f"   CSV: {csv_file}")
        
        logger.info("‚úÖ COLLECTE S√âCURIS√âE TERMIN√âE!")
        return True
    else:
        logger.warning("‚ö†Ô∏è Aucune donn√©e collect√©e")
        logger.info("üí° V√©rifiez vos cl√©s API dans le fichier .env")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)




